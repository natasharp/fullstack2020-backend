{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","value","handler","onChange","PersonForm","props","onSubmit","submitHandler","nameValue","nameHandler","phoneValue","phoneHandler","type","Person","person","removePersonHandler","name","number","onClick","Persons","persons","map","key","Notification","message","success","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","baseUrl","axios","get","then","response","data","newObject","post","id","delete","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","newFilter","setNewFilter","notification","setNewNotification","isSuccess","setIsSuccess","useEffect","personService","initialPersons","addDeleteErrorNotification","setTimeout","addSuccessNotification","personsToDisplay","filter","toLowerCase","includes","event","target","preventDefault","returnedPerson","concat","catch","error","console","log","window","confirm","p","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be794d07.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({ value, handler }) =>\r\n  <div>filter shown with <input value={value} onChange={handler} /></div>\r\n\r\n  export default Filter\r\n","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.submitHandler}>\r\n      <div>\r\n        name: <input\r\n          value={props.nameValue}\r\n          onChange={props.nameHandler} />\r\n      </div>\r\n      <div>\r\n        number: <input\r\n          value={props.phoneValue}\r\n          onChange={props.phoneHandler} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>)\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Person = ({ person, removePersonHandler }) => {\r\n    return (\r\n        <div>\r\n            {person.name}<span> </span>\r\n            {person.number}<span> </span>\r\n            <button onClick={() => removePersonHandler(person)}>delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Persons = ({ persons, removePersonHandler }) => {\r\n    return (\r\n        <div>\r\n            {persons.map(person =>\r\n                <Person\r\n                    key={person.name}\r\n                    person={person}\r\n                    removePersonHandler={removePersonHandler}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons\r\n\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message, success }) => {\r\n\r\n  const notificationStyle = {\r\n    color: 'green',\r\n    background: 'lightgrey',\r\n    fontSize: 20,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  }\r\n\r\n  const errorStyle = {\r\n    color: 'red',\r\n    background: 'lightgrey',\r\n    fontSize: 20,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  }\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  if (success === true) {\r\n    return (\r\n      <div style={notificationStyle}>\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={errorStyle}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newPhone, setNewPhone] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [notification, setNewNotification] = useState(null)\n  const [isSuccess, setIsSuccess] = useState(false)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => { setPersons(initialPersons) })\n  }, [])\n\n  const handleSubmitingPerson = (event) => {\n    event.preventDefault()\n    const newPerson = {\n      name: newName,\n      number: newPhone\n    }\n    personService.create(newPerson)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewPhone('')\n        addSuccessNotification(returnedPerson)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  const updatePerson = (newPersonInfo) => {\n    const person = persons.find(person => person.name.toLowerCase() === newPersonInfo.name.toLowerCase())\n    const result = window.confirm(`${person.name} is already added to phonebook, replace the old number with a new one?`)\n    if (result) {\n      personService.update(person.id, newPersonInfo)\n        .then(returnedPerson => { setPersons(persons.map(p => p.id !== person.id ? p : returnedPerson)) })\n        .then(setNewName(''))\n        .then(setNewPhone(''))\n        .catch(error => {\n          addDeleteErrorNotification(person)\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n    }\n  }\n\n  const handleNameInput = (event) => setNewName(event.target.value)\n  const handlePhoneInput = (event) => setNewPhone(event.target.value)\n  const handleFilterInput = (event) => setNewFilter(event.target.value)\n\n  const removePerson = (person) => {\n    const result = window.confirm(`Delete ${person.name}`)\n    if (result) {\n      personService\n        .remove(person.id)\n        .then(setPersons(persons.filter(p => p.id !== person.id)))\n        .catch(error => {\n          addDeleteErrorNotification(person)\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n    }\n  }\n\n  const addDeleteErrorNotification = (person) => {\n    setNewNotification(`Information of '${person.name}' has already been removed from server`)\n    setTimeout(() => {\n      setNewNotification(null)\n    }, 5000)\n  }\n\n  const addSuccessNotification = (person) => {\n    setNewNotification(`Added ${person.name}`)\n    setIsSuccess(true)\n    setTimeout(() => {\n      setNewNotification(null)\n      setIsSuccess(false)\n    }, 5000)\n  }\n\n  const personsToDisplay = persons.filter(\n    person => person.name.toLowerCase().includes(newFilter.toLowerCase())\n  )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification\n        message={notification}\n        success={isSuccess} />\n      <Filter\n        value={newFilter}\n        handler={handleFilterInput} />\n      <h3>Add a new</h3>\n      <PersonForm\n        nameValue={newName}\n        nameHandler={handleNameInput}\n        phoneValue={newPhone}\n        phoneHandler={handlePhoneInput}\n        submitHandler={handleSubmitingPerson} />\n      <h3>Numbers</h3>\n      <Persons\n        persons={personsToDisplay}\n        removePersonHandler={removePerson}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}